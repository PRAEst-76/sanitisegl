#!/bin/bash

# Default settings
SEARCH_DIR="."  # Default directory to current
MODE="test"     # Default to test mode
REMOVE_BRACKETS=false  # Default to not remove trailing brackets

# Parse command-line options
while getopts "d:tlb" opt; do
    case $opt in
        d) SEARCH_DIR="$OPTARG" ;;      # Set search directory
        t) MODE="test" ;;               # Set mode to test
        l) MODE="live" ;;               # Set mode to live
        b) REMOVE_BRACKETS=true ;;      # Enable bracket removal
        *) echo "Usage: $0 [-d directory] [-t] [-l] [-b]" >&2; exit 1 ;;
    esac
done

# Function to process gamelists
process_gamelists() {
    find "$SEARCH_DIR" -type f -name "gamelist.xml" | while read -r file; do
        echo "Processing file: $file"

        # Create a backup in live mode
        [ "$MODE" = "live" ] && cp "$file" "$file.bak"

        awk -v mode="$MODE" -v remove_brackets="$REMOVE_BRACKETS" '
        BEGIN {
            print "Starting processing for file..." > "/dev/stderr";
        }
        {
            ORIGINAL_LINE = $0;  # Keep the original line for debugging

            if ($0 ~ /<name>/) {
                print "Found <name> tag: " $0 > "/dev/stderr";

                # Match <name> tag and extract content
                if (match($0, /<name>([^<]*)<\/name>/, arr)) {
                    name = arr[1];

                    # Optionally remove trailing bracketed content
                    if (remove_brackets == "true") {
                        name = gensub(/[[:space:]]*[\(\[].*[\)\]]$/, "", "g", name);
                        print "Removed brackets: " name > "/dev/stderr";
                    }

                    # Replace " - " and " : " only when surrounded by valid text
                    name = gensub(/([[:alnum:]]) - ([[:alnum:]])/, "\\1: \\2", "g", name);
                    name = gensub(/([[:alnum:]]) : ([[:alnum:]])/, "\\1: \\2", "g", name);

                    print "Updated name: " name > "/dev/stderr";

                    # Replace <name> content with updated value
                    $0 = gensub(/<name>[^<]*<\/name>/, "<name>" name "</name>", "g", $0);
                } else {
                    print "No match for <name> content on this line." > "/dev/stderr";
                }
            }
            if (mode == "test") {
                if ($0 != ORIGINAL_LINE) print $0;  # Output only modified lines in test mode
            } else {
                print $0 > "/tmp/gamelist_temp";  # Write changes to temp file
            }
        }
        END {
            if (mode == "live") {
                close("/tmp/gamelist_temp");
                system("mv /tmp/gamelist_temp \"" file "\"");  # Replace original file
            }
        }' "$file"
    done
}

# Run the script
process_gamelists
